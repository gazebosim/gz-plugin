load(
    "//ign_bazel:cmake_configure_file.bzl",
    "cmake_configure_file",
)
load(
    "//ign_bazel:generate_include_header.bzl",
    "generate_include_header",
)
load(
    "//ign_bazel:generate_file.bzl",
    "generate_file",
)


PROJECT_NAME = "ignition-plugin"
PROJECT_MAJOR = 2
PROJECT_MINOR = 0
PROJECT_PATCH = 0

# Generates config.hh based on the version numbers in CMake code.
cmake_configure_file(
    name = "config",
    src = "include/ignition/plugin/config.hh.in",
    out = "include/ignition/plugin/config.hh",
    cmakelists = ["CMakeLists.txt"],
    defines = [
        "PROJECT_VERSION_MAJOR=%d" % (PROJECT_MAJOR),
        "PROJECT_VERSION_MINOR=%d" % (PROJECT_MINOR),
        "PROJECT_VERSION_PATCH=%d" % (PROJECT_PATCH),
        "PROJECT_MAJOR_VERSION=%d" % (PROJECT_MAJOR),
        "PROJECT_MINOR_VERSION=%d" % (PROJECT_MINOR),
        "PROJECT_PATCH_VERSION=%d" % (PROJECT_PATCH),
        "PROJECT_VERSION=%d.%d" % (PROJECT_MAJOR, PROJECT_MINOR),
        "PROJECT_VERSION_FULL=%d.%d.%d" % (PROJECT_MAJOR, PROJECT_MINOR, PROJECT_PATCH),  # noqa
        "PROJECT_NAME_NO_VERSION=%s" % (PROJECT_NAME),
    ],
    visibility = ["//visibility:private"],
)

generate_file(
    name = "include/ignition/plugin/Export.hh",
    content = """
#pragma once
// IGN_DEPRECATED is defined by all ignition libraries, but the version below
// is a simplified version.  When mixing the regular ignition libraries and
// the drake compiled ignition libraries, the compiler throws a warning about
// the macro being multiply defined.  We undefine it before redefining it here
// to work around that issue.  Note that the IGNITION_MATH_VISIBLE macro
// shouldn't be defined multiple times, but we undefine it just in case.
#ifdef IGNITION_PLUGIN_VISIBLE
#undef IGNITION_PLUGIN_VISIBLE
#endif
#define IGNITION_PLUGIN_VISIBLE __attribute__ ((visibility("default")))
#ifdef IGN_DEPRECATED
#undef IGN_DEPRECATED
#endif
#define IGN_DEPRECATED(version) __attribute__ ((__deprecated__))
    """,
    visibility = ["//visibility:private"],
)


public_headers_no_gen = [
    "include/ignition/plugin/EnablePluginFromThis.hh",
    "include/ignition/plugin/Factory.hh",
    "include/ignition/plugin/Info.hh",
    "include/ignition/plugin/Plugin.hh",
    "include/ignition/plugin/PluginPtr.hh",
    "include/ignition/plugin/SpecializedPlugin.hh",
    "include/ignition/plugin/SpecializedPluginPtr.hh",
    "include/ignition/plugin/utility.hh",
    "include/ignition/plugin/WeakPluginPtr.hh",
    "include/ignition/plugin/detail/Factory.hh",
    "include/ignition/plugin/detail/Plugin.hh",
    "include/ignition/plugin/detail/PluginPtr.hh",
    "include/ignition/plugin/detail/SpecializedPlugin.hh",
    "include/ignition/plugin/detail/utility.hh",
]

generate_include_header(
    name = "corehh_genrule",
    out = "include/ignition/plugin.hh",
    hdrs = public_headers_no_gen + [
        "incldue/ignition/plugin/config.hh",
        "include/ignition/plugin/Export.hh",
    ],
)

public_headers = public_headers_no_gen + [
    "include/ignition/plugin/config.hh",
    "include/ignition/plugin/Export.hh",
    "include/ignition/plugin.hh",
]

cc_binary(
    name = "libignition-plugin2.so",
    srcs = [
        "src/EnablePluginFromThis.cc",
        "src/Factory.cc",
        "src/Info.cc",
        "src/Plugin.cc",
        "src/utility.cc",
        "src/WeakPluginPtr.cc"
    ] + public_headers,
    includes = ["include"],
    linkopts = ["-Wl,-soname,libignition-plugin2.so"],
    linkshared = True,
    visibility = [],
    deps = [ "//ign_bazel:utilities" ]
)

cc_library(
    name = "ign_plugin",
    srcs = ["libignition-plugin2.so"],
    hdrs = public_headers,
    includes = ["include"],
    visibility = ["//visibility:public"],
)

test_srcs = [
    "src/Factory_TEST.cc",
    "src/Info_TEST.cc",
    "src/utility_TEST.cc"
]

[cc_test(
    name = src.replace("/", "_").replace(".cc", "").replace("src_", ""),
    srcs = [src],
    deps = [
        "//ign_bazel:utilities",
        "//ign_plugin/core:ign_plugin",
        "@gtest//:gtest",
        "@gtest//:gtest_main",
    ]
) for src in test_srcs]

